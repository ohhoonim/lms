<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.elonsoft.structurerole.system.mapper.BatchHistoryMapper">

    <select id="select" resultType="com.elonsoft.structurerole.system.vo.BatchHistory">
    /* BatchHistoryMapper - select */
            SELECT
                   BJE.JOB_EXECUTION_ID    as jobExecutionId
                 , BJI.JOB_INSTANCE_ID     as jobInstanceId
                 , BJI.JOB_NAME            as jobName
                 , BJE.STATUS              as status
                 , BJE.EXIT_MESSAGE        as exitMessage
                 , BJE.START_TIME          as startTime
              FROM BATCH_JOB_EXECUTION BJE
        INNER JOIN BATCH_JOB_INSTANCE BJI
                ON BJE.JOB_INSTANCE_ID = BJI.JOB_INSTANCE_ID
       <where>
            <if test="search.jobDivisionCode != null and search.jobDivisionCode != ''">
                AND BJI.JOB_NAME = #{search.jobDivisionCode}
            </if>
            <if test="search.batchStatusCode != null and search.batchStatusCode != ''">
                AND BJE.STATUS = #{search.batchStatusCode}
            </if>
            <if test="search.exitMessage != null and search.exitMessage != ''">
                AND BJE.EXIT_MESSAGE LIKE CONCAT(CONCAT('%', #{search.exitMessage}), '%')
            </if>
            <if test='search.periodRange != null'>
                AND BJE.START_TIME BETWEEN #{search.periodRange.startDateTime} AND #{search.periodRange.endDateTime}
            </if>
       </where>
        ORDER BY BJE.START_TIME DESC
    </select>
    
   <select id="findHistory" resultType="com.elonsoft.structurerole.system.vo.BatchHistory">
    /* BatchHistoryMapper - "findHistory" */
            SELECT
                   BJE.JOB_EXECUTION_ID    as jobExecutionId
                 , BJI.JOB_INSTANCE_ID     as jobInstanceId
                 , BJI.JOB_NAME            as jobName
                 , BJE.STATUS              as status
                 , BJE.EXIT_MESSAGE        as exitMessage
                 , BJE.START_TIME          as startTime
              FROM BATCH_JOB_EXECUTION BJE
        INNER JOIN BATCH_JOB_INSTANCE BJI
                ON BJE.JOB_INSTANCE_ID = BJI.JOB_INSTANCE_ID
                AND BJE.JOB_EXECUTION_ID = #{jobExecutionId}
        ORDER BY BJE.START_TIME DESC
    </select>
        
    <select id="findBatchJobInstanceId" resultType="string">
    	/* BatchHistoryMapper - findBatchJobInstanceId */
         SELECT JOB_INSTANCE_ID
         FROM BATCH_JOB_INSTANCE 
        WHERE JOB_NAME = #{batchHistory.jobName}  
          AND JOB_KEY = #{batchHistory.jobKey}
    </select>
    
	<select id="selecBatchJobInstanceId" resultType="string">
		/* BatchHistoryMapper - selecBatchJobInstanceId */
		SELECT NVL(MAX(JOB_INSTANCE_ID), 0) +1
		  FROM BATCH_JOB_INSTANCE
	</select>    
	
	<select id="selectBatchJobExecutionId" resultType="string">
		/* BatchHistoryMapper - selectBatchJobExecutionId */
		SELECT NVL(MAX(JOB_EXECUTION_ID), 0) +1
		  FROM BATCH_JOB_EXECUTION
	</select>    
	
    <insert id="insertBatchJobInstance" parameterType="map">
    	/* BatchHistoryMapper - insertBatchJobInstance */
        INSERT INTO BATCH_JOB_INSTANCE (
            JOB_INSTANCE_ID
            , JOB_NAME
            , JOB_KEY
        ) VALUES (
            #{batchHistory.jobInstanceId}
            , #{batchHistory.jobName}
            , #{batchHistory.jobKey}
        )
    </insert>	
	
    <insert id="insertBatchJobExecution" parameterType="map">
    	/* BatchHistoryMapper - insertBatchJobExecution */
        INSERT INTO BATCH_JOB_EXECUTION (
            JOB_EXECUTION_ID
            , JOB_INSTANCE_ID
            , CREATE_TIME
			, START_TIME            
        ) VALUES (
            #{batchHistory.jobExecutionId}
            , #{batchHistory.jobInstanceId}
            , SYSTIMESTAMP
            , SYSTIMESTAMP
        )
    </insert>		
    
	<update id="updateBatchJobExecution" parameterType="map">
		/* BatchHistoryMapper - updateBatchJobExecution */
		UPDATE BATCH_JOB_EXECUTION
		   SET END_TIME = SYSTIMESTAMP
			 , STATUS = #{batchHistory.status}
			 , EXIT_MESSAGE = #{batchHistory.exitMessage}
		 WHERE JOB_EXECUTION_ID = #{batchHistory.jobExecutionId}
		   AND JOB_INSTANCE_ID = #{batchHistory.jobInstanceId}
	</update>    	
	
</mapper>